"""add updated_at and pipeline status fields

Revision ID: 1c481be7436d
Revises: 66501cbbea91
Create Date: 2025-09-06 14:04:40.316492

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c481be7436d'
down_revision: Union[str, Sequence[str], None] = '66501cbbea91'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Add nullable first (Timescale hypertables with columnstore disallow NOT NULL with defaults)
    op.add_column('recordings', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('segment_embeddings', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.drop_index(op.f('idx_segment_embeddings_vector'), table_name='segment_embeddings', postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.add_column('segments', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('segments', sa.Column('asr_status', sa.String(), server_default='pending', nullable=False))
    op.add_column('segments', sa.Column('asr_last_processed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('segments', sa.Column('asr_attempts', sa.Integer(), server_default='0', nullable=False))
    op.add_column('segments', sa.Column('vision_status', sa.String(), server_default='pending', nullable=False))
    op.add_column('segments', sa.Column('vision_last_processed_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('segments', sa.Column('vision_attempts', sa.Integer(), server_default='0', nullable=False))
    op.add_column('transcripts', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))
    op.add_column('visual_events', sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True))

    # Backfill updated_at with current timestamp
    op.execute("UPDATE recordings SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE segment_embeddings SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE segments SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE transcripts SET updated_at = now() WHERE updated_at IS NULL")
    op.execute("UPDATE visual_events SET updated_at = now() WHERE updated_at IS NULL")

    # Enforce NOT NULL without defaults
    op.alter_column('recordings', 'updated_at', nullable=False)
    op.alter_column('segment_embeddings', 'updated_at', nullable=False)
    op.alter_column('segments', 'updated_at', nullable=False)
    op.alter_column('transcripts', 'updated_at', nullable=False)
    op.alter_column('visual_events', 'updated_at', nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('visual_events', 'updated_at')
    op.drop_column('transcripts', 'updated_at')
    op.drop_column('segments', 'vision_attempts')
    op.drop_column('segments', 'vision_last_processed_at')
    op.drop_column('segments', 'vision_status')
    op.drop_column('segments', 'asr_attempts')
    op.drop_column('segments', 'asr_last_processed_at')
    op.drop_column('segments', 'asr_status')
    op.drop_column('segments', 'updated_at')
    op.create_index(op.f('idx_segment_embeddings_vector'), 'segment_embeddings', ['vector'], unique=False, postgresql_with={'lists': '100'}, postgresql_using='ivfflat')
    op.drop_column('segment_embeddings', 'updated_at')
    op.drop_column('recordings', 'updated_at')
    # ### end Alembic commands ###
