"""baseline schema

Revision ID: 769f3fadf22a
Revises: 
Create Date: 2025-09-05 19:07:49.577423

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '769f3fadf22a'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('channel_stats',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('total_segments', sa.Integer(), nullable=False),
    sa.Column('transcribed_segments', sa.Integer(), nullable=False),
    sa.Column('avg_confidence', sa.Float(), nullable=True),
    sa.Column('last_segment_time', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    info={'is_view': True}
    )
    op.create_table('recent_segments',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('channel_id', sa.String(), nullable=False),
    sa.Column('channel_name', sa.String(), nullable=False),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('transcript', sa.Text(), nullable=True),
    sa.Column('transcript_confidence', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    info={'is_view': True}
    )
    op.alter_column('channels', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('channels', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('channels', 'url',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('channels', 'headers',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('channels', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('true'))
    op.add_column('recordings', sa.Column('extra', sa.JSON(), nullable=False))
    op.alter_column('recordings', 'channel_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('recordings', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'running'::text"))
    op.drop_index(op.f('recordings_started_at_idx'), table_name='recordings')
    op.drop_index(op.f('idx_recordings_channel_time'), table_name='recordings')
    op.create_index('idx_recordings_channel_time', 'recordings', ['channel_id', 'started_at'], unique=False)
    op.drop_column('recordings', 'metadata')
    op.alter_column('segment_embeddings', 'model_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.add_column('segments', sa.Column('extra', sa.JSON(), nullable=False))
    op.alter_column('segments', 'channel_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('segments', 'audio_path',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('segments', 'video_path',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('segments', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'created'::text"))
    op.drop_index(op.f('segments_started_at_idx'), table_name='segments')
    op.drop_index(op.f('idx_segments_channel_time'), table_name='segments')
    op.create_index('idx_segments_channel_time', 'segments', ['channel_id', 'started_at'], unique=False)
    op.drop_column('segments', 'metadata')
    op.drop_column('segments', 'duration_seconds')
    op.alter_column('system_metrics', 'metric_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('system_metrics', 'metric_value',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('system_metrics', 'tags',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               nullable=False,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('system_metrics', 'channel_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('system_metrics_timestamp_idx'), table_name='system_metrics')
    op.drop_index(op.f('idx_system_metrics_name'), table_name='system_metrics')
    op.create_index('idx_system_metrics_name', 'system_metrics', ['metric_name', 'timestamp'], unique=False)
    op.alter_column('transcripts', 'language',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False,
               existing_server_default=sa.text("'ar'::text"))
    op.alter_column('transcripts', 'words',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('transcripts', 'confidence',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('transcripts', 'model_name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('transcripts', 'model_version',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_transcripts_text_search'), table_name='transcripts', postgresql_using='gin')
    op.alter_column('visual_events', 'channel_id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('visual_events', 'timestamp_offset',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=False)
    op.alter_column('visual_events', 'event_type',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('visual_events', 'confidence',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True)
    op.alter_column('visual_events', 'data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('visual_events_created_at_idx'), table_name='visual_events')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('visual_events_created_at_idx'), 'visual_events', [sa.literal_column('created_at DESC')], unique=False)
    op.alter_column('visual_events', 'data',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.alter_column('visual_events', 'confidence',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('visual_events', 'event_type',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('visual_events', 'timestamp_offset',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False)
    op.alter_column('visual_events', 'channel_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index(op.f('idx_transcripts_text_search'), 'transcripts', [sa.literal_column("to_tsvector('arabic'::regconfig, text)")], unique=False, postgresql_using='gin')
    op.alter_column('transcripts', 'model_version',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('transcripts', 'model_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('transcripts', 'confidence',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True)
    op.alter_column('transcripts', 'words',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('transcripts', 'language',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'ar'::text"))
    op.drop_index('idx_system_metrics_name', table_name='system_metrics')
    op.create_index(op.f('idx_system_metrics_name'), 'system_metrics', ['metric_name', sa.literal_column('timestamp DESC')], unique=False)
    op.create_index(op.f('system_metrics_timestamp_idx'), 'system_metrics', [sa.literal_column('timestamp DESC')], unique=False)
    op.alter_column('system_metrics', 'channel_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('system_metrics', 'tags',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('system_metrics', 'metric_value',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=False)
    op.alter_column('system_metrics', 'metric_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('segments', sa.Column('duration_seconds', sa.REAL(), sa.Computed('EXTRACT(epoch FROM (ended_at - started_at))', persisted=True), autoincrement=False, nullable=True))
    op.add_column('segments', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_index('idx_segments_channel_time', table_name='segments')
    op.create_index(op.f('idx_segments_channel_time'), 'segments', ['channel_id', sa.literal_column('started_at DESC')], unique=False)
    op.create_index(op.f('segments_started_at_idx'), 'segments', [sa.literal_column('started_at DESC')], unique=False)
    op.alter_column('segments', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'created'::text"))
    op.alter_column('segments', 'video_path',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('segments', 'audio_path',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('segments', 'channel_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('segments', 'extra')
    op.alter_column('segment_embeddings', 'model_name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('recordings', sa.Column('metadata', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), autoincrement=False, nullable=True))
    op.drop_index('idx_recordings_channel_time', table_name='recordings')
    op.create_index(op.f('idx_recordings_channel_time'), 'recordings', ['channel_id', sa.literal_column('started_at DESC')], unique=False)
    op.create_index(op.f('recordings_started_at_idx'), 'recordings', [sa.literal_column('started_at DESC')], unique=False)
    op.alter_column('recordings', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False,
               existing_server_default=sa.text("'running'::text"))
    op.alter_column('recordings', 'channel_id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_column('recordings', 'extra')
    op.alter_column('channels', 'active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('true'))
    op.alter_column('channels', 'headers',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               existing_server_default=sa.text("'{}'::jsonb"))
    op.alter_column('channels', 'url',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('channels', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('channels', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_table('recent_segments')
    op.drop_table('channel_stats')
    # ### end Alembic commands ###
